#!/usr/bin/env groovy
import com.ge.nola.cfg.BanzaiCfg
import com.ge.nola.cfg.BanzaiVulnerabilityCfg
import com.ge.nola.BanzaiStage

def call(BanzaiCfg cfg, List<BanzaiVulnerabilityCfg> vulnerabilityCfgs) {
    def stages = [:]
    def pipeline = this
    String stageName
    vulnerabilityCfgs.each {
        switch (it.type) {
            case "checkmarx":
                String stageName = "Checkmarx"
                BanzaiStage banzaiStage = new BanzaiStage(
                    pipeline: pipeline,
                    cfg: cfg,
                    stageName: stageName
                )
                stages[it.type] = {
                    banzaiStage.execute {
                        try {
                            checkmarx(cfg, it)
                        } catch (Exception e) {
                            logger "Caught: ${e}"
                            currentBuild.result = 'UNSTABLE'
                            String abort = it.abortOnError ? "true" : "false"
                            throw new Exception(abort) // let the vulnerabilityStage know if it should abort
                        }
                    }
                }
                break
            case "coverity":
                String stageName = "Coverity"
                BanzaiStage banzaiStage = new BanzaiStage(
                    pipeline: pipeline,
                    cfg: cfg,
                    stageName: stageName
                )
                stages[it.type] = {
                    banzaiStage.execute {
                        try {
                            coverity(cfg, it)
                        } catch (Exception e) {
                            logger "Caught: ${e}"
                            currentBuild.result = 'UNSTABLE'
                            String abort = it.abortOnError ? "true" : "false"
                            throw new Exception(abort) // let the vulnerabilityStage know if it should abort
                        }
                    }
                }
            default:
                logger("Unable to parse vulnerabilityScans cfg item: ${it}")
                break
        }
    }

    parallel(stages)
}